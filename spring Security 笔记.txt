理想中的权限管理
1.实现角色级权限 RBAC
2.实现功能级、数据级权限
3.简单易操作，应对各种需求

相关操作界面
1. 权限管理界面 角色管理界面  用户管理界面
2.角色权限关系维护界面  用户和角色管理维护界面

spring security介绍
安全拦截器
	1.认证管理
	2.访问决策管理器
	3.运行身份管理器
	{basic digest x.509 ldap from}
	
权限拦截 流程
	user --request--> filter chain {servlter filter1 .--dofilter-->。2.。} --doget-->servlet  --response--> user
	
	SecurityContextPersistenceFilter ：SecurityContext可在SecurityContextHolder在web请求的开始设立，并且当web请求结束时SecurityContext任何改变可以被复制到HttpSession（准备下一个使用Web请求）
	
	BasicAuthenticationFilter	：认证处理机制 使得SecurityContextHolder可以被修饰以包含有效的Authentication请求令牌
	
	ExceptionTranslationFilter 	：捕获任何Spring安全异常,以便响应可以返回一个HTTP错误或适当的AuthenticationEntryPoint可以启动
	
	LogoutFiler
	
	SecurityContextHolderAwareRequestFilter	：如果你使用它来安装一个Spring Security意识HttpServletRequestWrapper到你的servlet容器
	
	SessionManagementFilter	：会话管理过滤器
	
	AbstractAuthentivationProcessingFilter
	
	RememberMeAuthenticationFilter	：如果早期的认证处理机制没有更新SecurityContextHolder并且请求给出一个Cookie使remember-me服务发生，一个合适的记忆Authentication对象将被放在那里
	
	FilterSecurityInterceptor	：保护网络的URI，当访问被拒绝引发异常
	
	DefaultLoginPageGeneratingFilter	：是 负责显示登录页面，将正常形式的登录和/或OpenID如果需要提供登录形式。 ] 该行为可以使用自定义
	
	AnonymousAuthenticationFilter	：这样如果之前的验证执行机制没有更新SecurityContextHolder，一个匿名Authentication对象将被放在那里
	
	FilterChainProxy

	
	//与preAuthorize配合使用  表示开启
	@EnableGlobalMethodSecurity(prePostEnabled = true)
	
	访问控制使用
	@PreAuthorize("hasRole('ROLE_ADMIN')")表示只能是 admin 用户才可以访问
	@PreAuthorize适合进入方法之前验证授权。 @PreAuthorize可以兼顾，角色/登录用户权限，参数传递给方法等等。
	@PostAuthorize虽然不经常使用，检查授权方法之后才被执行，所以它适合用在对返回的值作验证授权。
	
	过滤使用
	@PreFilter
	@PostFilter
	
	spring Security --优点
	1. 提供了一套安全框架，而且这个框架是可以用的
	2.	提供了很多用户认证的功能，实现相关接口即可，节约大量开发工作
	3.	基于spring ，易于集成到spring项目中，且封装了许多方法
	
	spring security --缺点
	1. 	配置文件多，角色被”编码“到配置文件和源文件中，RBAC不明显
	2.	对于系统中用户、角色、权限之间的关系，没有可操作的界面
	3.	大数据量下，几乎不可用
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
